org: katesclau
app: appsyncdiscovery
service: appsyncdiscovery

frameworkVersion: '2'

plugins:
  - serverless-appsync-plugin
  - serverless-iam-roles-per-function
  - serverless-export-env
  - serverless-manifest-plugin

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  region: 'us-east-1'
  stage: dev

package:
  exclude:
    - package-lock.json
    - package.json  

custom:
  stage: ${opt:stage, self:provider.stage} 
  appSync:
    - ${file(appsync.yml)}
  region: ${opt:stage, self:provider.region}
  environment:
    STAGE: ${self:custom.stage}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
  export-env:
    filename: .env
    overwrite: false
    enableOffline: true
  manifest:
    postProcess: ./processManifest.js
    disablePostDeployGeneration: true
    disableOutput: true
    silent: true


functions:
  confirmUserSignup:
    handler: functions/confirm-user-signup.handler
    environment:
      USERS_TABLE: !Ref UsersTable
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:PutItem
        Resource: !GetAtt UsersTable.Arn

  getImageUploadUrl:
    handler: functions/get-signed-url.handler
    environment:
      BUCKET_NAME: !Ref AssetsBucket
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:PutObjectAcl
        Resource: !Sub ${AssetsBucket.Arn}/*

  tweet:
    handler: functions/tweet.handler
    environment:
      USERS_TABLE_NAME: !Ref UsersTable
      TIMELINES_TABLE_NAME: !Ref TimelinesTable
      TWEETS_TABLE_NAME: !Ref TweetsTable
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:UptadeItem
        Resource: !GetAtt UsersTable.Arn
      - Effect: Allow
        Action: dynamodb:PutItem
        Resource: 
          - !GetAtt TimelinesTable.Arn
          - !GetAtt TweetsTable.Arn

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        # Tags:
        #   - Key: Environment
        #     Value: ${self:custom.stage}
        #   - Key: Name
        #     Value: users-table
    
    TweetsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: creator
            AttributeType: S
        GlobalSecondaryIndexes:
          - IndexName: byCreator
            KeySchema:
              - AttributeName: creator
                KeyType: HASH
              - AttributeName: id
                KeyType: RANGE
            Projection:
                ProjectionType: ALL

    TimelinesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: tweetId
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: tweetId
            AttributeType: S

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireUppercase: true
            RequireSymbols: true
        UsernameAttributes:
          - email
        Schema:
          - AttributeDataType: String
            Name:  name
            Required: false
            Mutable: true
        LambdaConfig:
          PostConfirmation: !GetAtt ConfirmUserSignupLambdaFunction.Arn # Configures the trigger function on Cognito
    
    UserPoolInvokeConfirmUserSignupLambdaPermission: # Adds permission to Cognito, to execute the lambda function
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:invokeFunction
        FunctionName: !Ref ConfirmUserSignupLambdaFunction
        Principal: cognito-idp.amazonaws.com
        SourceArn: !GetAtt CognitoUserPool.Arn

    UserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId: !Ref CognitoUserPool
        ClientName: web
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED # Prevents user guessing exploits

    AssetsBucket:
      Type: AWS::S3::Bucket
      Properties:
        AccelerateConfiguration:
          AccelerationStatus: Enabled
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - GET
                - PUT
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'

  Outputs:
    AwsRegion:
      Value: ${self:custom.region}
      
    CognitoUserPoolId:
      Value: !Ref CognitoUserPool

    UserPoolClientId:
      Value: !Ref UserPoolClient

    UsersTable:
      Value: !Ref UsersTable
